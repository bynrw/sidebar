{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\GitHub\\\\sidebar\\\\src\\\\components\\\\layout\\\\FavoriteCard.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport CustomCard from './CustomCard';\nimport { useFavoritesContext } from '../../App';\nimport { Chip, Box } from '@mui/material';\nimport { useTheme } from '@mui/material/styles';\n\n/**\r\n * Wrapper für CustomCard mit Favoriten-Funktionalität\r\n * Diese Komponente kann in der gesamten Anwendung verwendet werden,\r\n * um die Favoriten-Funktionalität konsistent anzuwenden\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FavoriteCard = props => {\n  _s();\n  // Wir beziehen jetzt die Daten aus dem Context statt aus den Props\n  const {\n    favorites,\n    toggleFavorite\n  } = useFavoritesContext();\n  const theme = useTheme();\n\n  // Bestimme die Menüfarbe basierend auf accentColor oder der Kategorie\n  const getMenuColor = () => {\n    // Extrahiere den Farbtyp aus dem accentColor (z.B. \"primary.main\" -> \"primary\")\n    if (props.accentColor) {\n      const colorType = props.accentColor.split('.')[0];\n      return colorType;\n    }\n\n    // Fallback-Werte basierend auf dem Pfad oder Titel\n    if (props.path) {\n      if (props.path.includes('/einsatz')) return 'error';\n      if (props.path.includes('/erfassung')) return 'primary';\n      if (props.path.includes('/auswertung')) return 'secondary';\n      if (props.path.includes('/jahresstatistik')) return 'secondary';\n      if (props.path.includes('/administration')) return 'info';\n      if (props.path.includes('/benutzerverwaltung')) return 'primary';\n      if (props.path.includes('/hilfe')) return 'success';\n      if (props.path.includes('/medical')) return 'medical';\n      if (props.path.includes('/fire')) return 'fire';\n      if (props.path.includes('/police')) return 'police';\n      if (props.path.includes('/tech')) return 'tech';\n    }\n\n    // Standardwert\n    return 'primary';\n  };\n\n  // Bestimme den Anzeigenamen für den Chip\n  const getMenuName = () => {\n    if (props.path) {\n      if (props.path.includes('/einsatz')) return 'Einsatz';\n      if (props.path.includes('/erfassung')) return 'Erfassung';\n      if (props.path.includes('/auswertung')) return 'Auswertung';\n      if (props.path.includes('/jahresstatistik')) return 'Statistik';\n      if (props.path.includes('/administration')) return 'Admin';\n      if (props.path.includes('/benutzerverwaltung')) return 'Benutzer';\n      if (props.path.includes('/hilfe')) return 'Hilfe';\n      if (props.path.includes('/medical')) return 'Medizin';\n      if (props.path.includes('/fire')) return 'Feuer';\n      if (props.path.includes('/police')) return 'Polizei';\n      if (props.path.includes('/tech')) return 'Technik';\n    }\n\n    // Standardwert\n    return 'Menü';\n  };\n\n  // Bereite die Daten für den toggleFavorite-Aufruf vor\n  // Icon ist ein React-Element und kann nicht direkt serialisiert werden\n  const handleToggleFavorite = () => {\n    // Erstelle eine neue Objektkopie ohne das Icon\n    const cardDataForStorage = {\n      title: props.title,\n      path: props.path,\n      accentColor: props.accentColor || 'primary.main',\n      // Bei der Anzeige von Favoriten wird das Icon dynamisch zugewiesen\n      // basierend auf dem iconType oder title\n      iconType: props.iconType || props.title\n    };\n    toggleFavorite(cardDataForStorage);\n  };\n\n  // Prüfe, ob die Karte ein Favorit ist\n  const checkIsFavorite = () => {\n    return favorites && favorites.some(fav => fav.title === props.title && fav.path === props.path);\n  };\n\n  // Menüfarbe und Name für Chip\n  const menuColor = getMenuColor();\n  const menuName = getMenuName();\n\n  // Erstelle erweiterte Props mit Chip\n  const enhancedProps = {\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mt: 'auto',\n        width: '100%',\n        display: 'flex',\n        justifyContent: 'center'\n      },\n      children: /*#__PURE__*/_jsxDEV(Chip, {\n        size: \"small\",\n        label: menuName,\n        color: menuColor,\n        sx: {\n          height: 22,\n          fontSize: '0.7rem',\n          fontWeight: 500,\n          borderLeft: '4px solid',\n          borderColor: `${menuColor}.main`,\n          marginTop: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)\n  };\n  return /*#__PURE__*/_jsxDEV(CustomCard, {\n    ...enhancedProps,\n    isFavorite: checkIsFavorite(),\n    onToggleFavorite: handleToggleFavorite\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoriteCard, \"1UnCoeg7Hfc9sLCpbx8AFlUgLC0=\", false, function () {\n  return [useFavoritesContext, useTheme];\n});\n_c = FavoriteCard;\nexport default FavoriteCard;\nvar _c;\n$RefreshReg$(_c, \"FavoriteCard\");","map":{"version":3,"names":["React","CustomCard","useFavoritesContext","Chip","Box","useTheme","jsxDEV","_jsxDEV","FavoriteCard","props","_s","favorites","toggleFavorite","theme","getMenuColor","accentColor","colorType","split","path","includes","getMenuName","handleToggleFavorite","cardDataForStorage","title","iconType","checkIsFavorite","some","fav","menuColor","menuName","enhancedProps","children","sx","mt","width","display","justifyContent","size","label","color","height","fontSize","fontWeight","borderLeft","borderColor","marginTop","fileName","_jsxFileName","lineNumber","columnNumber","isFavorite","onToggleFavorite","_c","$RefreshReg$"],"sources":["C:/Users/User/GitHub/sidebar/src/components/layout/FavoriteCard.js"],"sourcesContent":["import React from 'react';\r\nimport CustomCard from './CustomCard';\r\nimport { useFavoritesContext } from '../../App';\r\nimport { Chip, Box } from '@mui/material';\r\nimport { useTheme } from '@mui/material/styles';\r\n\r\n/**\r\n * Wrapper für CustomCard mit Favoriten-Funktionalität\r\n * Diese Komponente kann in der gesamten Anwendung verwendet werden,\r\n * um die Favoriten-Funktionalität konsistent anzuwenden\r\n */\r\nconst FavoriteCard = (props) => {\r\n  // Wir beziehen jetzt die Daten aus dem Context statt aus den Props\r\n  const { favorites, toggleFavorite } = useFavoritesContext();\r\n  const theme = useTheme();\r\n  \r\n  // Bestimme die Menüfarbe basierend auf accentColor oder der Kategorie\r\n  const getMenuColor = () => {\r\n    // Extrahiere den Farbtyp aus dem accentColor (z.B. \"primary.main\" -> \"primary\")\r\n    if (props.accentColor) {\r\n      const colorType = props.accentColor.split('.')[0];\r\n      return colorType;\r\n    }\r\n    \r\n    // Fallback-Werte basierend auf dem Pfad oder Titel\r\n    if (props.path) {\r\n      if (props.path.includes('/einsatz')) return 'error';\r\n      if (props.path.includes('/erfassung')) return 'primary';\r\n      if (props.path.includes('/auswertung')) return 'secondary';\r\n      if (props.path.includes('/jahresstatistik')) return 'secondary';\r\n      if (props.path.includes('/administration')) return 'info';\r\n      if (props.path.includes('/benutzerverwaltung')) return 'primary';\r\n      if (props.path.includes('/hilfe')) return 'success';\r\n      if (props.path.includes('/medical')) return 'medical';\r\n      if (props.path.includes('/fire')) return 'fire';\r\n      if (props.path.includes('/police')) return 'police';\r\n      if (props.path.includes('/tech')) return 'tech';\r\n    }\r\n    \r\n    // Standardwert\r\n    return 'primary';\r\n  };\r\n  \r\n  // Bestimme den Anzeigenamen für den Chip\r\n  const getMenuName = () => {\r\n    if (props.path) {\r\n      if (props.path.includes('/einsatz')) return 'Einsatz';\r\n      if (props.path.includes('/erfassung')) return 'Erfassung';\r\n      if (props.path.includes('/auswertung')) return 'Auswertung';\r\n      if (props.path.includes('/jahresstatistik')) return 'Statistik';\r\n      if (props.path.includes('/administration')) return 'Admin';\r\n      if (props.path.includes('/benutzerverwaltung')) return 'Benutzer';\r\n      if (props.path.includes('/hilfe')) return 'Hilfe';\r\n      if (props.path.includes('/medical')) return 'Medizin';\r\n      if (props.path.includes('/fire')) return 'Feuer';\r\n      if (props.path.includes('/police')) return 'Polizei';\r\n      if (props.path.includes('/tech')) return 'Technik';\r\n    }\r\n    \r\n    // Standardwert\r\n    return 'Menü';\r\n  };\r\n  \r\n  // Bereite die Daten für den toggleFavorite-Aufruf vor\r\n  // Icon ist ein React-Element und kann nicht direkt serialisiert werden\r\n  const handleToggleFavorite = () => {\r\n    // Erstelle eine neue Objektkopie ohne das Icon\r\n    const cardDataForStorage = { \r\n      title: props.title,\r\n      path: props.path,\r\n      accentColor: props.accentColor || 'primary.main',\r\n      // Bei der Anzeige von Favoriten wird das Icon dynamisch zugewiesen\r\n      // basierend auf dem iconType oder title\r\n      iconType: props.iconType || props.title\r\n    };\r\n    \r\n    toggleFavorite(cardDataForStorage);\r\n  };\r\n  \r\n  // Prüfe, ob die Karte ein Favorit ist\r\n  const checkIsFavorite = () => {\r\n    return favorites && favorites.some(fav => \r\n      fav.title === props.title && fav.path === props.path\r\n    );\r\n  };\r\n  \r\n  // Menüfarbe und Name für Chip\r\n  const menuColor = getMenuColor();\r\n  const menuName = getMenuName();\r\n  \r\n  // Erstelle erweiterte Props mit Chip\r\n  const enhancedProps = {\r\n    ...props,\r\n    children: (\r\n      <Box sx={{ mt: 'auto', width: '100%', display: 'flex', justifyContent: 'center' }}>\r\n        <Chip\r\n          size=\"small\"\r\n          label={menuName}\r\n          color={menuColor}\r\n          sx={{\r\n            height: 22,\r\n            fontSize: '0.7rem',\r\n            fontWeight: 500,\r\n            borderLeft: '4px solid',\r\n            borderColor: `${menuColor}.main`,\r\n            marginTop: 1\r\n          }}\r\n        />\r\n      </Box>\r\n    )\r\n  };\r\n  \r\n  return (\r\n    <CustomCard\r\n      {...enhancedProps}\r\n      isFavorite={checkIsFavorite()}\r\n      onToggleFavorite={handleToggleFavorite}\r\n    />\r\n  );\r\n};\r\n\r\nexport default FavoriteCard;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AACrC,SAASC,mBAAmB,QAAQ,WAAW;AAC/C,SAASC,IAAI,EAAEC,GAAG,QAAQ,eAAe;AACzC,SAASC,QAAQ,QAAQ,sBAAsB;;AAE/C;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B;EACA,MAAM;IAAEC,SAAS;IAAEC;EAAe,CAAC,GAAGV,mBAAmB,CAAC,CAAC;EAC3D,MAAMW,KAAK,GAAGR,QAAQ,CAAC,CAAC;;EAExB;EACA,MAAMS,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,IAAIL,KAAK,CAACM,WAAW,EAAE;MACrB,MAAMC,SAAS,GAAGP,KAAK,CAACM,WAAW,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MACjD,OAAOD,SAAS;IAClB;;IAEA;IACA,IAAIP,KAAK,CAACS,IAAI,EAAE;MACd,IAAIT,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,OAAO;MACnD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,SAAS;MACvD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE,OAAO,WAAW;MAC1D,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,OAAO,WAAW;MAC/D,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,OAAO,MAAM;MACzD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,qBAAqB,CAAC,EAAE,OAAO,SAAS;MAChE,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,SAAS;MACnD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,SAAS;MACrD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,MAAM;MAC/C,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,QAAQ;MACnD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,MAAM;IACjD;;IAEA;IACA,OAAO,SAAS;EAClB,CAAC;;EAED;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIX,KAAK,CAACS,IAAI,EAAE;MACd,IAAIT,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,SAAS;MACrD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE,OAAO,WAAW;MACzD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,aAAa,CAAC,EAAE,OAAO,YAAY;MAC3D,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE,OAAO,WAAW;MAC/D,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,iBAAiB,CAAC,EAAE,OAAO,OAAO;MAC1D,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,qBAAqB,CAAC,EAAE,OAAO,UAAU;MACjE,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE,OAAO,OAAO;MACjD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAE,OAAO,SAAS;MACrD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,OAAO;MAChD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,SAAS,CAAC,EAAE,OAAO,SAAS;MACpD,IAAIV,KAAK,CAACS,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,EAAE,OAAO,SAAS;IACpD;;IAEA;IACA,OAAO,MAAM;EACf,CAAC;;EAED;EACA;EACA,MAAME,oBAAoB,GAAGA,CAAA,KAAM;IACjC;IACA,MAAMC,kBAAkB,GAAG;MACzBC,KAAK,EAAEd,KAAK,CAACc,KAAK;MAClBL,IAAI,EAAET,KAAK,CAACS,IAAI;MAChBH,WAAW,EAAEN,KAAK,CAACM,WAAW,IAAI,cAAc;MAChD;MACA;MACAS,QAAQ,EAAEf,KAAK,CAACe,QAAQ,IAAIf,KAAK,CAACc;IACpC,CAAC;IAEDX,cAAc,CAACU,kBAAkB,CAAC;EACpC,CAAC;;EAED;EACA,MAAMG,eAAe,GAAGA,CAAA,KAAM;IAC5B,OAAOd,SAAS,IAAIA,SAAS,CAACe,IAAI,CAACC,GAAG,IACpCA,GAAG,CAACJ,KAAK,KAAKd,KAAK,CAACc,KAAK,IAAII,GAAG,CAACT,IAAI,KAAKT,KAAK,CAACS,IAClD,CAAC;EACH,CAAC;;EAED;EACA,MAAMU,SAAS,GAAGd,YAAY,CAAC,CAAC;EAChC,MAAMe,QAAQ,GAAGT,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMU,aAAa,GAAG;IACpB,GAAGrB,KAAK;IACRsB,QAAQ,eACNxB,OAAA,CAACH,GAAG;MAAC4B,EAAE,EAAE;QAAEC,EAAE,EAAE,MAAM;QAAEC,KAAK,EAAE,MAAM;QAAEC,OAAO,EAAE,MAAM;QAAEC,cAAc,EAAE;MAAS,CAAE;MAAAL,QAAA,eAChFxB,OAAA,CAACJ,IAAI;QACHkC,IAAI,EAAC,OAAO;QACZC,KAAK,EAAET,QAAS;QAChBU,KAAK,EAAEX,SAAU;QACjBI,EAAE,EAAE;UACFQ,MAAM,EAAE,EAAE;UACVC,QAAQ,EAAE,QAAQ;UAClBC,UAAU,EAAE,GAAG;UACfC,UAAU,EAAE,WAAW;UACvBC,WAAW,EAAE,GAAGhB,SAAS,OAAO;UAChCiB,SAAS,EAAE;QACb;MAAE;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAET,CAAC;EAED,oBACE1C,OAAA,CAACN,UAAU;IAAA,GACL6B,aAAa;IACjBoB,UAAU,EAAEzB,eAAe,CAAC,CAAE;IAC9B0B,gBAAgB,EAAE9B;EAAqB;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxC,CAAC;AAEN,CAAC;AAACvC,EAAA,CA5GIF,YAAY;EAAA,QAEsBN,mBAAmB,EAC3CG,QAAQ;AAAA;AAAA+C,EAAA,GAHlB5C,YAAY;AA8GlB,eAAeA,YAAY;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}