{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\GitHub\\\\sidebar\\\\src\\\\context\\\\FavoritesContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const FavoritesContext = /*#__PURE__*/createContext();\nexport const FavoritesProvider = ({\n  children\n}) => {\n  _s();\n  // Favoriten aus dem localStorage laden, falls vorhanden\n  const [favorites, setFavorites] = useState(() => {\n    const savedFavorites = localStorage.getItem('favorites');\n    return savedFavorites ? JSON.parse(savedFavorites) : [];\n  });\n\n  // Favoriten im localStorage speichern, wenn sie sich ändern\n  useEffect(() => {\n    localStorage.setItem('favorites', JSON.stringify(favorites));\n  }, [favorites]);\n\n  // Funktion zum Umschalten des Favoritenstatus\n  const toggleFavorite = item => {\n    setFavorites(prevFavorites => {\n      // Prüfen, ob das Element bereits in den Favoriten ist\n      const existingIndex = prevFavorites.findIndex(fav => fav.title === item.title && fav.path === item.path && fav.cardType === item.cardType);\n      if (existingIndex !== -1) {\n        // Wenn bereits in Favoriten, entfernen\n        return prevFavorites.filter((_, index) => index !== existingIndex);\n      } else {\n        // Wenn nicht in Favoriten, hinzufügen\n        return [...prevFavorites, item];\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(FavoritesContext.Provider, {\n    value: {\n      favorites,\n      toggleFavorite\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(FavoritesProvider, \"Zzw26YAzpUtN146KODnDG7IPKN0=\");\n_c = FavoritesProvider;\nvar _c;\n$RefreshReg$(_c, \"FavoritesProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","FavoritesContext","FavoritesProvider","children","_s","favorites","setFavorites","savedFavorites","localStorage","getItem","JSON","parse","setItem","stringify","toggleFavorite","item","prevFavorites","existingIndex","findIndex","fav","title","path","cardType","filter","_","index","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/GitHub/sidebar/src/context/FavoritesContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\r\n\r\nexport const FavoritesContext = createContext();\r\n\r\nexport const FavoritesProvider = ({ children }) => {\r\n  // Favoriten aus dem localStorage laden, falls vorhanden\r\n  const [favorites, setFavorites] = useState(() => {\r\n    const savedFavorites = localStorage.getItem('favorites');\r\n    return savedFavorites ? JSON.parse(savedFavorites) : [];\r\n  });\r\n\r\n  // Favoriten im localStorage speichern, wenn sie sich ändern\r\n  useEffect(() => {\r\n    localStorage.setItem('favorites', JSON.stringify(favorites));\r\n  }, [favorites]);\r\n\r\n  // Funktion zum Umschalten des Favoritenstatus\r\n  const toggleFavorite = (item) => {\r\n    setFavorites(prevFavorites => {\r\n      // Prüfen, ob das Element bereits in den Favoriten ist\r\n      const existingIndex = prevFavorites.findIndex(fav => \r\n        fav.title === item.title && \r\n        fav.path === item.path && \r\n        fav.cardType === item.cardType\r\n      );\r\n      \r\n      if (existingIndex !== -1) {\r\n        // Wenn bereits in Favoriten, entfernen\r\n        return prevFavorites.filter((_, index) => index !== existingIndex);\r\n      } else {\r\n        // Wenn nicht in Favoriten, hinzufügen\r\n        return [...prevFavorites, item];\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <FavoritesContext.Provider value={{ favorites, toggleFavorite }}>\r\n      {children}\r\n    </FavoritesContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,OAAO,MAAMC,gBAAgB,gBAAGL,aAAa,CAAC,CAAC;AAE/C,OAAO,MAAMM,iBAAiB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjD;EACA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,MAAM;IAC/C,MAAMU,cAAc,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACxD,OAAOF,cAAc,GAAGG,IAAI,CAACC,KAAK,CAACJ,cAAc,CAAC,GAAG,EAAE;EACzD,CAAC,CAAC;;EAEF;EACAT,SAAS,CAAC,MAAM;IACdU,YAAY,CAACI,OAAO,CAAC,WAAW,EAAEF,IAAI,CAACG,SAAS,CAACR,SAAS,CAAC,CAAC;EAC9D,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC;;EAEf;EACA,MAAMS,cAAc,GAAIC,IAAI,IAAK;IAC/BT,YAAY,CAACU,aAAa,IAAI;MAC5B;MACA,MAAMC,aAAa,GAAGD,aAAa,CAACE,SAAS,CAACC,GAAG,IAC/CA,GAAG,CAACC,KAAK,KAAKL,IAAI,CAACK,KAAK,IACxBD,GAAG,CAACE,IAAI,KAAKN,IAAI,CAACM,IAAI,IACtBF,GAAG,CAACG,QAAQ,KAAKP,IAAI,CAACO,QACxB,CAAC;MAED,IAAIL,aAAa,KAAK,CAAC,CAAC,EAAE;QACxB;QACA,OAAOD,aAAa,CAACO,MAAM,CAAC,CAACC,CAAC,EAAEC,KAAK,KAAKA,KAAK,KAAKR,aAAa,CAAC;MACpE,CAAC,MAAM;QACL;QACA,OAAO,CAAC,GAAGD,aAAa,EAAED,IAAI,CAAC;MACjC;IACF,CAAC,CAAC;EACJ,CAAC;EAED,oBACEf,OAAA,CAACC,gBAAgB,CAACyB,QAAQ;IAACC,KAAK,EAAE;MAAEtB,SAAS;MAAES;IAAe,CAAE;IAAAX,QAAA,EAC7DA;EAAQ;IAAAyB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEhC,CAAC;AAAC3B,EAAA,CArCWF,iBAAiB;AAAA8B,EAAA,GAAjB9B,iBAAiB;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}